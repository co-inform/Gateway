package eu.coinform.gateway.module;

import com.google.common.base.Charsets;
import com.google.common.io.CharStreams;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClients;
import org.springframework.scheduling.annotation.Async;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.function.Function;

/**
 * ModuleRequest is the class implemented to perform the actual requests. It extends HttpPost since the
 * gateway will always be performing POST requests to the modules different API's
 */
@Slf4j
public class ModuleRequest extends HttpPost {

    /**
     * Number of attempts performed for an individual Request
     */
    @Getter
    private int attempts = 0;

    /**
     * Maximum number of attempts allowed for a request
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private int maxAttempts;

    /**
     * An array holding the different types of exceptions that a request can generate
     */
    private Exception[] exceptions;

    /**
     * a functional object handling the response generated by the request
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private Function<HttpResponse, HttpResponse> responseHandler;

    /**
     * An id identifying the actual transaction of a certain request to a module.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private String transactionId;
    /**
     * An id identiifying the query from the plugin.
     */
    @Getter
    @Setter(AccessLevel.PROTECTED)
    private String queryId;

    /**
     *  The class constructor. Takes one parameter that is passed on to the super class
     * @param uri a URI for the request
     */
    protected ModuleRequest(URI uri) {
        super(uri);
    }

    /**
     * THe moduleRequestException method loops for maxAttempts and tries to perform the request. If unsuccessful it
     * throws a ModuleRequestException when it reaches maxAttempts.
     *
     * @param ex an excepition thrown in the sendRequest() method
     * @param message the message from the exception
     * @return a HttpResponse from the successfull request
     * @throws ModuleRequestException if number of attempts exceeds maxAttempts
     */
    private HttpResponse moduleRequestException(Exception ex, String message) throws ModuleRequestException {
        log.error("{}, {}: {}", message, ex.getClass().getName(), ex.getMessage());
        if (attempts == 0) {
            exceptions = new Exception[maxAttempts];
        }
        exceptions[attempts] = ex;
        if (++attempts < maxAttempts) {
            return sendRequest();
        }
        throw new ModuleRequestException(String.format("Could not complete moduleRequest, failed after %d tries. Last exception: %s", maxAttempts, ex.getMessage()), exceptions);
    }

    /**
     * makeRequest() method is the public method used by calling methods/classes to perform the actual request.
     * @throws ModuleRequestException when max number of attemtps has been reached
     */
    @Async("redisExecutor")
    public void makeRequest() throws ModuleRequestException {
        if (log.isDebugEnabled()) {
            StringBuilder sb = new StringBuilder();
            for (Header header : getAllHeaders()) {
                sb.append(header.toString());
                sb.append("\n");
            }
            log.debug("Sending HTTP request: {}", toString());
            log.debug("headers: {}", sb.substring(0, sb.length()-1));
            try {
                log.debug("content: {}", CharStreams
                        .toString(new InputStreamReader(getEntity().getContent(), Charsets.UTF_8)));
            } catch (IOException ex) {
                log.debug("failing to write content: {}", ex.getMessage());
            }
        }
        sendRequest();
    }

    /**
     * sendRequest() is the method called by makeRequest() to perform the request and get the response.
     *
     * @return an HttpResponse containing the actual response from the request.
     * @throws ModuleRequestException when maxAttempts has been reached
     */
    private HttpResponse sendRequest() throws ModuleRequestException{
        HttpResponse httpResponse = null;
        try {
            HttpClient httpClient = HttpClients.createMinimal();
            httpResponse = httpClient.execute(this );
        } catch (ClientProtocolException ex) {
            httpResponse = moduleRequestException(ex, "http protocol error");
        } catch (IOException ex) {
            httpResponse = moduleRequestException(ex, "connection problem");
        }
        httpResponse = getResponseHandler().apply(httpResponse);
        return httpResponse;
    }

    /**
     * getMethod() returns the method name, in this case POST
     * @return POST
     */

    @Override
    public String getMethod() {
        return HttpPost.METHOD_NAME;
    }
}

